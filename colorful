#!/usr/bin/python
from os.path import isfile, join
import sys
import subprocess
import os
import subprocess
import argparse
from src.Colorful import Colorful
from src.Format import LayoutParser
import random
import configparser
import re
from pprint import pprint


def get_file_from(dir, rand=False):
    """Returns a filename from directory after user specifies which"""
    files = [f for f in os.listdir(dir) if isfile(join(dir, f))]
    input = random.randrange(0, len(files))
    return dir + files[int(input) - 1]

def define_argparser():
    """Return and define arguments and help documentation"""
    parser = argparse.ArgumentParser(
        prog="colorful",
        description="Retheme that pos.")
    
    parser.add_argument(
        "-f", "--file",  metavar='FILE', dest='file',
        help="The image file to work with.",)
    parser.add_argument(
        '-w', action="store_true",
        default=False,
        help="make this image the current wallpaper [default: False]")
    parser.add_argument(
        '-p', "--pipe", dest="pipename",
        metavar="F", default="/tmp/display_data",
        help="write the hexidecimal output to a new file [default: /tmp/display_data]")
    parser.add_argument(
        "-d", "--dir", dest="dir",
        metavar="D",
        help="Choose a directory and then choose a file from the prompt.")
    parser.add_argument(
        '-n', dest='n', metavar='N', type=int,
        default=64,
        help="The number of colors to fetch [default: 64]")
    parser.add_argument(
        '-q', dest='q', default=False,
        action="store_true",
        help="Set this flag to save the output to a hex file")
    parser.add_argument(
        '-r', dest='r', default=False,
        action='store_true',
        help="When used with the directory option chooses a random file")

    return parser.parse_args()


def do_configs(image):
    dir = "/home/cody/code/colorful/config/"
    files = [f for f in os.listdir(dir) if isfile(join(dir, f))]
    for i, file in enumerate(files):
        if 'conf' not in file:
            del(files[i])
    config = configparser.ConfigParser()
    for file in files:
        config.read(dir + file)
        palette = image.get_palette()

        output_file = config.get('app', 'conf')
        layout_file = config.get('app', 'layout')

        target = None
        with open(layout_file, 'r') as file:
            target = file.read()
        parser = LayoutParser(target,
                              config.get('app', 'format'),
                              image,
                              config.get('app', 'is_term'))

        with open(output_file, 'w+') as file:
            file.write(parser.target)

def main():
    args = define_argparser()
    config = configparser.ConfigParser()
    config.read(os.environ['HOME'] + '/code/colorful/default.conf')
    dir = config.get('colorful', 'default_directory')
   
    if args.file:
        file = args.file
    else: 
        if not args.dir:
            file = get_file_from(dir, True)
        elif args.file:
            file = args.file
        elif args.dir:
            file = get_file_from(args.dir, True)
        else:
            print>> sys.stderr, "No image specified."

    image = Colorful(file)
    if args.q:
        image.write_colors(args.n)

    do_configs(image)

    w = config.get('colorful', 'wallpaper')
    if args.w or w:
        image.paper_me_baby()

    subprocess.check_output('i3-msg reload', shell=True)
    subprocess.check_output('xrdb -load /home/cody/.config/i3/Xresources', shell=True)
    # os.popen("i3-msg reload &> /dev/null").read()
    # os.popen("xrdb -load /home/cody/.config/i3/Xresources").read()


if __name__ == "__main__":
    sys.exit(main())
